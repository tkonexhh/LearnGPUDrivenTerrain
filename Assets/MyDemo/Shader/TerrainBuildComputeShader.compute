// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TraverseQuadTree
#pragma kernel BuildPatches
#pragma kernel BuildLodMap //创建LOD Map 用于处理接缝

#pragma multi_compile_local __ _REVERSE_Z
#pragma multi_compile_local __ PATCH_BOUNDS_DEBUG //开启Patch BOUNDS 调式
#pragma multi_compile_local __ NODE_BOUNDS_DEBUG //开启NODE BOUNDS 调式
#pragma multi_compile_local __ CULL_ON //开启Cull

#include "./TerrainInput.hlsl"

Texture2D<float4> _HeightMap;

Texture2D<float4> MinMaxHeightTexture;//

//xy 代表Node的二维索引
ConsumeStructuredBuffer<uint2> ConsumeNodeList;
AppendStructuredBuffer<uint2> AppendNodeList;
//xy 代表Node的二维索引 z 代表LOD
AppendStructuredBuffer<uint3> AppendFinalNodeList;
//四叉树遍历完成后，合适的节点存放在这里
StructuredBuffer<uint3> FinalNodeList;

//表示TraverseQuadTree kernel执行的LOD级别
uniform uint PassLOD;
uniform float3 _CameraPositionWS;//相机的位置


//*****裁剪相关变量*******/
uniform float4 _CameraFrustumPlanes[6];//摄像机6个平面 xyz法线方向  w距离
AppendStructuredBuffer<RenderPatch> CulledPatchList;

#if PATCH_BOUNDS_DEBUG
AppendStructuredBuffer<BoundsDebug> PatchBoundsList;
#endif

#if NODE_BOUNDS_DEBUG
    AppendStructuredBuffer<BoundsDebug> NodeBoundsList;
#endif


//包围盒在高度方向留出冗余空间，应对MinMaxHeightTexture的精度不足
uniform int _BoundsHeightRedundance;

//*******世界尺寸参数********//
//世界大小
uniform float3 _WorldSize;

//
/*
记录了每个Lod级别的(nodeSize,patchHalfSize,nodeCount,sectorCountPerNode) 目前0-5 6层
其中:
- nodeSize为Node的边长(米)
- patchHalfSize等于nodeSize/8/2
- nodeCount等于WorldSize/nodeSize
- sectorCountPerNode等于2^lod
*/
uniform float4 WorldLodParams[6];

// uniform uint NodeIDOffsetOfLOD[6];

uniform float _HizDepthBias;
//****以下这些参数全由HizMapPass全局设置得到***//
Texture2D<float4> _HizMap;
uniform float4 _HizMapSize;
uniform float4x4 _HizCameraMatrixVP;
uniform float3 _HizCameraPositionWS;
////////////////////////////////////////////////////////////////////////////////////////////////////////


float GetNodeSize(uint lod)
{
    return WorldLodParams[lod].x;
}

float GetNodeCount(uint lod)
{
    return WorldLodParams[lod].z;
}

// 获取当前LOD下 单个Patch宽度的一半
float GetHalfPatchSize(uint lod)
{
    return WorldLodParams[lod].y;
}

float2 GetMinMaxHeight(uint lod, uint2 nodeLoc)
{
    return MinMaxHeightTexture.mips[lod][nodeLoc].xy;
}

float2 GetNodePositionWS2(uint2 nodeLoc, uint mip)
{
    float nodeMeterSize = GetNodeSize(mip);
    float nodeCount = GetNodeCount(mip);
    float2 nodePositionWS = ((float2)nodeLoc - (nodeCount - 1) * 0.5) * nodeMeterSize;
    return nodePositionWS;
}

float3 GetNodePositionWS(uint2 nodeLoc, uint lod)
{
    float2 nodePositionWS = GetNodePositionWS2(nodeLoc, lod);
    float2 minMaxHeight = GetMinMaxHeight(lod + 3, nodeLoc);
    float y = (minMaxHeight.x + minMaxHeight.y) * 0.5 * _WorldSize.y;//中心点Y
    return float3(nodePositionWS.x, y, nodePositionWS.y);
}

//决定是否细分Node
/*f = d / (n * c);
d=摄像机到节点中心距离
n=节点边长
c=用户控制系数*/
bool EvaluateNode(uint2 nodeLoc, uint lod)
{
    float3 positionWS = GetNodePositionWS(nodeLoc, lod);
    // _CameraPositionWS.y = 0;
    float d = distance(_CameraPositionWS, positionWS);
    float n = GetNodeSize(lod);
    float f = d / (n * NodeEvaluationC);
    //可以四分
    if (f < 1)
    {
        return true;
    }
    return false;
}


// //将三维转换为1维的
// uint GetNodeId(uint3 nodeLoc)
// {
//     return NodeIDOffsetOfLOD[nodeLoc.z] + nodeLoc.y * GetNodeCount(nodeLoc.z) + nodeLoc.x;
// }
//============裁剪相关

//获取Patch的包围盒
Bounds GetPatchBounds(RenderPatch patch)
{
    float halfPachSize = GetHalfPatchSize(patch.lod);
    Bounds bounds;
    float3 boundsMin, boundsMax;
    boundsMin.xz = patch.position - halfPachSize;
    boundsMax.xz = patch.position + halfPachSize;
    boundsMin.y = patch.minMaxHeight.x;
    boundsMax.y = patch.minMaxHeight.y;

    bounds.minPosition = boundsMin;
    bounds.maxPosition = boundsMax;
    return bounds;
}

//==============视锥剔除

//测试是否在平面的外侧
bool IsOutSidePlane(float4 plane, float3 position)
{
    return dot(plane.xyz, position) + plane.w < 0;
}

//判断一个包围盒是否全在平面外面 八个点都在外面
bool IsAABBOutSidePlane(float4 plane, float3 boundsMin, float3 boundsMax)
{
    return IsOutSidePlane(plane, boundsMin) &&
    IsOutSidePlane(plane, boundsMax) &&
    IsOutSidePlane(plane, float3(boundsMin.x, boundsMin.y, boundsMax.z)) &&
    IsOutSidePlane(plane, float3(boundsMin.x, boundsMax.y, boundsMin.z)) &&
    IsOutSidePlane(plane, float3(boundsMin.x, boundsMax.y, boundsMax.z)) &&
    IsOutSidePlane(plane, float3(boundsMax.x, boundsMin.y, boundsMax.z)) &&
    IsOutSidePlane(plane, float3(boundsMax.x, boundsMax.y, boundsMin.z)) &&
    IsOutSidePlane(plane, float3(boundsMax.x, boundsMin.y, boundsMin.z));
}

bool IsBoundsOutSidePlane(float4 plane, Bounds bounds)
{
    return IsAABBOutSidePlane(plane, bounds.minPosition, bounds.maxPosition);
}

//视锥裁剪
bool FrustumCull(float4 planes[6], Bounds bounds)
{
    return IsBoundsOutSidePlane(planes[0], bounds) ||
    IsBoundsOutSidePlane(planes[1], bounds) ||
    IsBoundsOutSidePlane(planes[2], bounds) ||
    IsBoundsOutSidePlane(planes[3], bounds) ||
    IsBoundsOutSidePlane(planes[4], bounds) ||
    IsBoundsOutSidePlane(planes[5], bounds);
}
//--------------


//=============Hiz剔除
//将世界坐标转为uv+depth
float3 TransformWorldToUVD(float3 positionWS)
{
    float4 positionHS = mul(_HizCameraMatrixVP, float4(positionWS, 1.0));
    float3 uvd = positionHS.xyz / positionHS.w;
    uvd.xy = (uvd.xy + 1) * 0.5;
    //点可能跑到摄像机背后去，深度会变成负数，需要特殊处理一下
    if (uvd.z < 0)
    {
        #if _REVERSE_Z
            uvd.z = 1;
        #else
            uvd.z = 0;
        #endif
    }
    return uvd;
}


Bounds GetBoundsUVD(Bounds boundsWS)
{
    Bounds boundsUVD;

    float3 boundsMin = boundsWS.minPosition;
    float3 boundsMax = boundsWS.maxPosition;

    float3 p0 = TransformWorldToUVD(boundsMin);
    float3 p1 = TransformWorldToUVD(boundsMax);
    float3 p2 = TransformWorldToUVD(float3(boundsMin.x, boundsMin.y, boundsMax.z));
    float3 p3 = TransformWorldToUVD(float3(boundsMin.x, boundsMax.y, boundsMin.z));
    float3 p4 = TransformWorldToUVD(float3(boundsMin.x, boundsMax.y, boundsMax.z));
    float3 p5 = TransformWorldToUVD(float3(boundsMax.x, boundsMin.y, boundsMax.z));
    float3 p6 = TransformWorldToUVD(float3(boundsMax.x, boundsMax.y, boundsMin.z));
    float3 p7 = TransformWorldToUVD(float3(boundsMax.x, boundsMin.y, boundsMin.z));

    float3 min1 = min(min(p0, p1), min(p2, p3));
    float3 min2 = min(min(p4, p5), min(p6, p7));
    boundsUVD.minPosition = min(min1, min2);

    float3 max1 = max(max(p0, p1), max(p2, p3));
    float3 max2 = max(max(p4, p5), max(p6, p7));
    boundsUVD.maxPosition = max(max1, max2);
    return boundsUVD;
}

uint GetHizMip(Bounds boundsUVD)
{
    float3 minP = boundsUVD.minPosition;
    float3 maxP = boundsUVD.maxPosition;
    float2 size = (maxP.xy - minP.xy) * _HizMapSize.x;
    uint2 mip2 = ceil(log2(size));
    uint mip = clamp(max(mip2.x, mip2.y), 1, _HizMapSize.z - 1);
    return mip;
}

float SampleHiz(float2 uv, float mip, float mipTexSize)
{
    uint2 coord = floor(uv * mipTexSize);
    coord = min(coord, round(mipTexSize) - 1);
    return _HizMap.mips[mip][coord].r;
}


bool HizOcclusionCull(Bounds bounds)
{
    bounds.minPosition -= normalize(bounds.minPosition - _HizCameraPositionWS) * _HizDepthBias;
    bounds.maxPosition -= normalize(bounds.maxPosition - _HizCameraPositionWS) * _HizDepthBias;

    Bounds boundsUVD = GetBoundsUVD(bounds);

    uint mip = GetHizMip(boundsUVD);

    float3 minP = boundsUVD.minPosition;
    float3 maxP = boundsUVD.maxPosition;

    float mipTexSize = round(_HizMapSize.x / pow(2, mip));
    float d1 = SampleHiz(minP.xy, mip, mipTexSize);
    float d2 = SampleHiz(maxP.xy, mip, mipTexSize);
    float d3 = SampleHiz(float2(minP.x, maxP.y), mip, mipTexSize);
    float d4 = SampleHiz(float2(maxP.x, minP.y), mip, mipTexSize);
    #if _REVERSE_Z
        float depth = maxP.z;
        return d1 > depth && d2 > depth && d3 > depth && d4 > depth;
    #else
        float depth = minP.z;
        return d1 < depth && d2 < depth && d3 < depth && d4 < depth;
    #endif
}
//-----------------



bool Cull(Bounds bounds)
{
    #if CULL_ON
        //使用视锥裁剪
        // return FrustumCull(_CameraFrustumPlanes, bounds);
        //使用HiZ裁剪
        return HizOcclusionCull(bounds);

    #endif

    return false;
}
//------------


//遍历四叉树，进行节点评价，生成AppendFinalNodeList和NodeDescriptors
[numthreads(1, 1, 1)]
void TraverseQuadTree(uint3 id: SV_DispatchThreadID)
{
    uint2 nodeLoc = ConsumeNodeList.Consume();
    if (PassLOD > 0 && EvaluateNode(nodeLoc, PassLOD))
    {
        //四分
        AppendNodeList.Append(nodeLoc * 2);
        AppendNodeList.Append(nodeLoc * 2 + uint2(1, 0));
        AppendNodeList.Append(nodeLoc * 2 + uint2(0, 1));
        AppendNodeList.Append(nodeLoc * 2 + uint2(1, 1));
    }
    else
    {
        //不需要分化 全部加入到FinalNode
        AppendFinalNodeList.Append(uint3(nodeLoc, PassLOD));


        #if NODE_BOUNDS_DEBUG
            float halfNodeSize = GetHalfPatchSize(PassLOD) * 8;//一个Node有8*8个Patch组成
            float2 nodePositionWS = GetNodePositionWS2(nodeLoc, PassLOD);
            float2 minMaxHeight = GetMinMaxHeight(PassLOD + 3, nodeLoc) * _WorldSize.y;
            // float s = (minMaxHeight.y - minMaxHeight.x);
            Bounds bounds;
            float3 boundsMin, boundsMax;
            boundsMin.xz = nodePositionWS - halfNodeSize;
            boundsMax.xz = nodePositionWS + halfNodeSize;
            boundsMin.y = minMaxHeight.x ;
            boundsMax.y = minMaxHeight.y ;

            bounds.minPosition = boundsMin;
            bounds.maxPosition = boundsMax;

            BoundsDebug boundsDebug;
            boundsDebug.bounds = bounds;
            boundsDebug.color = float4((bounds.minPosition + _WorldSize * 0.5) / _WorldSize, 1);
            NodeBoundsList.Append(boundsDebug);
        #endif
    }
}

RenderPatch CreatePatch(uint3 nodeLoc, uint2 patchOffset)
{
    uint lod = nodeLoc.z;
    //当前LOD下的Node大小
    float nodeMeterSize = GetNodeSize(lod);
    //当前LOD下的Patch大小 一排是8个
    float patchMeterSize = nodeMeterSize / PATCH_COUNT_PER_NODE;
    //得到当前Node的坐标
    float2 nodePositionWS = GetNodePositionWS2(nodeLoc.xy, lod);

    uint2 patchLoc = nodeLoc.xy * PATCH_COUNT_PER_NODE + patchOffset;
    //经测试，当min和max相差较小时，RG32似乎还是存在精度问题
    float2 minMaxHeight = GetMinMaxHeight(lod, patchLoc) * _WorldSize.y + float2(-_BoundsHeightRedundance, _BoundsHeightRedundance);
    RenderPatch patch;
    patch.lod = lod;
    //局部坐标+node世界坐标
    patch.position = nodePositionWS + (patchOffset - (PATCH_COUNT_PER_NODE - 1) * 0.5) * patchMeterSize;
    patch.minMaxHeight = minMaxHeight;
    // patch.lodTrans = 0;
    return patch;
}


// 8,8 的原因是 一个Node由8*8个Patch组成
[numthreads(8, 8, 1)]
void BuildPatches(uint3 id: SV_DispatchThreadID, uint3 groupId: SV_GroupID, uint3 groupThreadId: SV_GroupThreadID)
{
    uint3 nodeLoc = FinalNodeList[groupId.x];
    uint2 patchOffset = groupThreadId.xy;
    //生成Patch
    RenderPatch patch = CreatePatch(nodeLoc, patchOffset);
    

    //裁剪
    Bounds bounds = GetPatchBounds(patch);
    if (Cull(bounds))
    {
        return;
    }

    CulledPatchList.Append(patch);

    //构建每个Patch的包围盒 由两个V3坐标组成
    #if PATCH_BOUNDS_DEBUG
        BoundsDebug boundsDebug;
        boundsDebug.bounds = bounds;
        boundsDebug.color = float4((bounds.minPosition + _WorldSize * 0.5) / _WorldSize, 1);
        PatchBoundsList.Append(boundsDebug);
    #endif
}



//========LOD Map部分
//构建LOD 0 下的LODMAP 相邻的LOD级别不同的话 就去处理接缝 需要先获得
[numthreads(8, 8, 1)]
void BuildLodMap(uint3 id: SV_DispatchThreadID)
{
    uint2 sectorLoc = id.xy;
    // [unroll]
    // for (uint lod = MAX_TERRAIN_LOD; lod >= 0; lod--)
    // {

    // }

}
//